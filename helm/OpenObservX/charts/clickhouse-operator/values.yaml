operator:
  image:
    repository: altinity/clickhouse-operator:0.22.0
    tag: ""
    pullPolicy: IfNotPresent
  resources: {}
  env: []
metrics:
  enabled: true
  image:
    repository: altinity/metrics-exporter:0.22.0
    tag: ""
    pullPolicy: IfNotPresent
  resources: {}
  env: []
imagePullSecrets: {}
image:
  registry: sealos.hub:5000
podAnnotations: {}
nameOverride: ""
fullnameOverride: ""
serviceAccount:
  create: true
  annotations: {}
  name:
secret:
  create: true
  username: clickhouse_operator
  password: clickhouse_operator_password
nodeSelector: {}
tolerations: []

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - podAffinityTerm:
        labelSelector:
          matchLabels:
            clickhouse.altinity.com/chi: clickhouse-cluster
        topologyKey: kubernetes.io/hostname
      weight: 20
serviceMonitor:
  enabled: true
  additionalLabels:
    release: acos
    acos-prometheus: "true"
configs:
  confdFiles: null
  configdFiles:
    01-clickhouse-01-listen.xml: |
      <yandex>
          <listen_host>::</listen_host>
          <listen_host>0.0.0.0</listen_host>
          <http_port>8123</http_port>
          <tcp_port>9000</tcp_port>
          <listen_try>1</listen_try>
      </yandex>
    01-clickhouse-02-logger.xml: |
      <yandex>
          <logger>
              <level>information</level>
              <log>/var/log/clickhouse-server/clickhouse-server.log</log>
              <errorlog>/var/log/clickhouse-server/clickhouse-server.err.log</errorlog>
              <size>5000M</size>
              <count>10</count>
              <!-- Default behavior is autodetection (log to console if not daemon mode and is tty) -->
              <console>1</console>
          </logger>
      </yandex>
    01-clickhouse-03-query_log.xml: |
      <yandex>
          <query_log replace="1">
              <database>system</database>
              <table>query_log</table>
              <engine>Engine = MergeTree PARTITION BY event_date ORDER BY event_time TTL event_date + interval 30 day</engine>
              <flush_interval_milliseconds>7500</flush_interval_milliseconds>
          </query_log>
          <query_thread_log remove="1"/>
      </yandex>
    01-clickhouse-04-part_log.xml: |-
      <yandex>
          <part_log replace="1">
              <database>system</database>
              <table>part_log</table>
              <engine>Engine = MergeTree PARTITION BY event_date ORDER BY event_time TTL event_date + interval 30 day</engine>
              <flush_interval_milliseconds>7500</flush_interval_milliseconds>
          </part_log>
      </yandex>
  files:
    config.yaml: |-
      # Template parameters available:
      #   WATCH_NAMESPACES=
      #   CH_USERNAME_PLAIN=
      #   CH_PASSWORD_PLAIN=
      #   CH_CREDENTIALS_SECRET_NAMESPACE=
      #   CH_CREDENTIALS_SECRET_NAME=clickhouse-operator
      ################################################
      ##
      ## Watch Section
      ##
      ################################################
      watch:
        # List of namespaces where clickhouse-operator watches for events.
        # Concurrently running operators should watch on different namespaces.
        #namespaces: ["dev", "test"]
        namespaces: []
      clickhouse:
        configuration:
          ################################################
          ##
          ## Configuration Files Section
          ##
          ################################################
          file:
            path:
              common: config.d
              host: conf.d
              user: users.d
          user:
            default:
              profile: "default"
              quota: "default"
              networksIP:
                - "::1"
                - "127.0.0.1"
              password: "abc123"
          network:
            # Default host_regexp to limit network connectivity from outside
            hostRegexpTemplate: "(chi-{chi}-[^.]+\\d+-\\d+|clickhouse\\-{chi})\\.{namespace}\\.svc\\.cluster\\.local$"
        configurationRestartPolicy:
          rules:
            - version: "*"
              rules:
                - settings/*: "yes"
                - settings/dictionaries_config: "no"
                - settings/logger: "no"
                - settings/macros/*: "no"
                - settings/max_server_memory_*: "no"
                - settings/max_*_to_drop: "no"
                - settings/max_concurrent_queries: "no"
                - settings/models_config: "no"
                - settings/user_defined_executable_functions_config: "no"
                - zookeeper/*: "yes"
                - files/config.d/*.xml: "yes"
                - files/config.d/*dict*.xml: "no"
                - profiles/default/background_*_pool_size: "yes"
                - profiles/default/max_*_for_server: "yes"
            - version: "21.*"
              rules:
                - settings/logger: "yes"
        access:
          # Possible values for `scheme` are:
          # 1. http
          # 2. https
          scheme: "http"
          # ClickHouse credentials (username, password and port) to be used by the operator to connect to ClickHouse instances.
          # Used for:
          # 1. Metrics requests
          # 2. Schema maintenance
          # 3. DROP DNS CACHE
          # User with these credentials can be specified in additional ClickHouse .xml config files,
          # located in `clickhouse.configuration.file.path.user` folder
          username: "default"
          password: "abc123"
          rootCA: ""
          # Location of the k8s Secret with username and password to be used by the operator to connect to ClickHouse instances.
          # Can be used instead of explicitly specified username and password which are:
          # clickhouse.access.username
          # clickhouse.access.password
          # Secret should have two keys:
          # 1. username
          # 2. password
          secret:
            # Empty `namespace` means that k8s secret would be looked in the same namespace where operator's pod is running.
            namespace: ""
            # Empty `name` means no k8s Secret would be looked for
            name: "{{ include "clickhouse-operator.fullname" . }}"
          # Port where to connect to ClickHouse instances to
          port: 8123
          # Timeouts used to limit connection and queries from the operator to ClickHouse instances
          # Specified in seconds.
          timeouts:
            connect: 2
            query: 5
        metrics:
          timeouts:
            collect: 9
      ################################################
      ##
      ## Templates Section
      ##
      ################################################
      template:
        chi:
          # Path to the folder where ClickHouseInstallation .yaml manifests are located.
          # Manifests are applied in sorted alpha-numeric order.
          path: templates.d
      ################################################
      ##
      ## Reconcile Section
      ##
      ################################################
      reconcile:
        runtime:
          # Max number of concurrent reconciles in progress
          threadsNumber: 10
        statefulSet:
          create:
            # What to do in case created StatefulSet is not in 'Ready' after `reconcile.statefulSet.update.timeout` seconds
            # Possible options:
            # 1. abort - do nothing, just break the process and wait for an admin to assist
            # 2. delete - delete newly created problematic StatefulSet
            # 3. ignore - ignore an error, pretend nothing happened and move on to the next StatefulSet
            onFailure: ignore
          update:
            # How many seconds to wait for created/updated StatefulSet to be 'Ready'
            timeout: 300
            # How many seconds to wait between checks/polls for created/updated StatefulSet status
            pollInterval: 5
            # What to do in case updated StatefulSet is not in 'Ready' after `reconcile.statefulSet.update.timeout` seconds
            # Possible options:
            # 1. abort - do nothing, just break the process and wait for an admin to assist
            # 2. rollback - delete Pod and rollback StatefulSet to previous Generation.
            # Pod would be recreated by StatefulSet based on rollback-ed configuration
            # 3. ignore - ignore an error, pretend nothing happened and move on to the next StatefulSet
            onFailure: rollback
        host:
          # Whether reconciler should wait for a host:
          # - to be excluded from a cluster
          # OR
          # - to be included into a cluster
          # respectfully
          wait:
            exclude: true
            include: false
      ################################################
      ##
      ## Annotations management
      ##
      ################################################
      annotation:
        # Applied when:
        #  1. Propagating annotations from the CHI's `metadata.annotations` to child objects' `metadata.annotations`,
        #  2. Propagating annotations from the CHI Template's `metadata.annotations` to CHI's `metadata.annotations`,
        # Include annotations from the following list:
        # Applied only when not empty. Empty list means "include all, no selection"
        include: []
        # Exclude annotations from the following list:
        exclude: []
      ################################################
      ##
      ## Labels management
      ##
      ################################################
      label:
        # Applied when:
        #  1. Propagating labels from the CHI's `metadata.labels` to child objects' `metadata.labels`,
        #  2. Propagating labels from the CHI Template's `metadata.labels` to CHI's `metadata.labels`,
        # Include labels from the following list:
        # Applied only when not empty. Empty list means "include all, no selection"
        include: []
        # Exclude labels from the following list:
        # Applied only when not empty. Empty list means "nothing to exclude, no selection"
        exclude: []
        # Whether to append *Scope* labels to StatefulSet and Pod.
        # Full list of available *scope* labels check in 'labeler.go'
        #  LabelShardScopeIndex
        #  LabelReplicaScopeIndex
        #  LabelCHIScopeIndex
        #  LabelCHIScopeCycleSize
        #  LabelCHIScopeCycleIndex
        #  LabelCHIScopeCycleOffset
        #  LabelClusterScopeIndex
        #  LabelClusterScopeCycleSize
        #  LabelClusterScopeCycleIndex
        #  LabelClusterScopeCycleOffset
        appendScope: "no"
      ################################################
      ##
      ## StatefulSet management
      ##
      ################################################
      statefulSet:
        revisionHistoryLimit: 0
      ################################################
      ##
      ## Pod management
      ##
      ################################################
      pod:
        # Grace period for Pod termination.
        # How many seconds to wait between sending
        # SIGTERM and SIGKILL during Pod termination process.
        # Increase this number is case of slow shutdown.
        terminationGracePeriod: 30
      ################################################
      ##
      ## Log parameters
      ##
      ################################################
      logger:
        logtostderr: "true"
        alsologtostderr: "false"
        v: "1"
        stderrthreshold: ""
        vmodule: ""
        log_backtrace_at: ""
  templatesdFiles:
    001-templates.json.example: |
      {
        "apiVersion": "clickhouse.altinity.com/v1",
        "kind": "ClickHouseInstallationTemplate",
        "metadata": {
          "name": "01-default-volumeclaimtemplate"
        },
        "spec": {
          "templates": {
            "volumeClaimTemplates": [
              {
                "name": "chi-default-volume-claim-template",
                "spec": {
                  "accessModes": [
                    "ReadWriteOnce"
                  ],
                  "resources": {
                    "requests": {
                      "storage": "2Gi"
                    }
                  }
                }
              }
            ],
            "podTemplates": [
              {
                "name": "chi-default-oneperhost-pod-template",
                "distribution": "OnePerHost",
                "spec": {
                  "containers" : [
                    {
                      "name": "clickhouse",
                      "image": "clickhouse/clickhouse-server:21.12",
                      "ports": [
                        {
                          "name": "http",
                          "containerPort": 8123
                        },
                        {
                          "name": "client",
                          "containerPort": 9000
                        },
                        {
                          "name": "interserver",
                          "containerPort": 9009
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    default-pod-template.yaml.example: |
      apiVersion: "clickhouse.altinity.com/v1"
      kind: "ClickHouseInstallationTemplate"
      metadata:
        name: "default-oneperhost-pod-template"
      spec:
        templates:
          podTemplates:
            - name: default-oneperhost-pod-template
              distribution: "OnePerHost"
    default-storage-template.yaml.example: |
      apiVersion: "clickhouse.altinity.com/v1"
      kind: "ClickHouseInstallationTemplate"
      metadata:
        name: "default-storage-template-2Gi"
      spec:
        templates:
          volumeClaimTemplates:
            - name: default-storage-template-2Gi
              spec:
                accessModes:
                  - ReadWriteOnce
                resources:
                  requests:
                    storage: 2Gi
    readme: |-
      Templates in this folder are packaged with an operator and available via 'useTemplate'
  usersdFiles:
    01-clickhouse-operator-profile.xml: |
      <!-- IMPORTANT -->
      <!-- This file is auto-generated -->
      <!-- Do not edit this file - all changes would be lost -->
      <!-- Edit appropriate template in the following folder: -->
      <!-- deploy/builder/templates-config -->
      <!-- IMPORTANT -->
      <!--
      #
      # Template parameters available:
      #
      -->
      <yandex>
          <!-- clickhouse-operator user is generated by the operator based on config.yaml in runtime -->
          <profiles>
              <clickhouse_operator>
                  <log_queries>0</log_queries>
                  <skip_unavailable_shards>1</skip_unavailable_shards>
                  <http_connection_timeout>10</http_connection_timeout>
                  <max_concurrent_queries_for_all_users>0</max_concurrent_queries_for_all_users>
                  <os_thread_priority>0</os_thread_priority>
              </clickhouse_operator>
          </profiles>
      </yandex>
    02-clickhouse-default-profile.xml: |-
      <!-- IMPORTANT -->
      <!-- This file is auto-generated -->
      <!-- Do not edit this file - all changes would be lost -->
      <!-- Edit appropriate template in the following folder: -->
      <!-- deploy/builder/templates-config -->
      <!-- IMPORTANT -->
      <yandex>
        <profiles>
          <default>
            <os_thread_priority>2</os_thread_priority>
            <log_queries>1</log_queries>
            <connect_timeout_with_failover_ms>1000</connect_timeout_with_failover_ms>
            <distributed_aggregation_memory_efficient>1</distributed_aggregation_memory_efficient>
            <parallel_view_processing>1</parallel_view_processing>
            <do_not_merge_across_partitions_select_final>1</do_not_merge_across_partitions_select_final>
            <load_balancing>nearest_hostname</load_balancing>
          </default>
        </profiles>
      </yandex>
# additionalResources -- list of additional resources to create (are processed via `tpl` function)

additionalResources:
  - |
    apiVersion: v1
    kind: ConfigMap
    metadata:
      labels:
      name: chi-clickhouse-cluster-config-file
    data:
      config.xml: |
        <?xml version="1.0"?>
        <clickhouse>
            <logger>
                <level>information</level>
                <log>/var/log/clickhouse-server/clickhouse-server.log</log>
                <errorlog>/var/log/clickhouse-server/clickhouse-server.err.log</errorlog>
                <size>500M</size>
                <count>5</count>
            </logger>
            <http_port>8123</http_port>
            <tcp_port>9000</tcp_port>
            <interserver_http_port>9009</interserver_http_port>
            <max_connections>4096</max_connections>
            <keep_alive_timeout>180</keep_alive_timeout>
            <max_concurrent_queries>600</max_concurrent_queries>
            <max_server_memory_usage>0</max_server_memory_usage>
            <max_thread_pool_size>10000</max_thread_pool_size>
            <max_server_memory_usage_to_ram_ratio>0.9</max_server_memory_usage_to_ram_ratio>
            <total_memory_profiler_step>4194304</total_memory_profiler_step>
            <total_memory_tracker_sample_probability>0</total_memory_tracker_sample_probability>
            <uncompressed_cache_size>8589934592</uncompressed_cache_size>
            <mark_cache_size>5368709120</mark_cache_size>

            <mmap_cache_size>1000</mmap_cache_size>

            <compiled_expression_cache_size>134217728</compiled_expression_cache_size>
            <compiled_expression_cache_elements_size>10000</compiled_expression_cache_elements_size>

            <path>/var/lib/clickhouse/</path>
            <tmp_path>/var/lib/clickhouse/tmp/</tmp_path>

            <user_files_path>/var/lib/clickhouse/user_files/</user_files_path>
            <user_directories>
                <users_xml>
                    <!-- Path to configuration file with predefined users. -->
                    <path>users.xml</path>
                </users_xml>
                <local_directory>
                    <!-- Path to folder where users created by SQL commands are stored. -->
                    <path>/var/lib/clickhouse/access/</path>
                </local_directory>
            </user_directories>

            <!-- Default profile of settings. -->
            <default_profile>default</default_profile>
            <custom_settings_prefixes></custom_settings_prefixes>
            <default_database>default</default_database>
            <mlock_executable>true</mlock_executable>
            <remap_executable>false</remap_executable>
            <builtin_dictionaries_reload_interval>3600</builtin_dictionaries_reload_interval>

            <max_session_timeout>3600</max_session_timeout>

            <default_session_timeout>180</default_session_timeout>

            <query_log>
                <database>system</database>
                <table>query_log</table>
                <partition_by>toYYYYMM(event_date)</partition_by>
                <flush_interval_milliseconds>7500</flush_interval_milliseconds>
            </query_log>
            <asynchronous_metric_log>
                <database>system</database>
                <table>asynchronous_metric_log</table>
                <flush_interval_milliseconds>7000</flush_interval_milliseconds>
            </asynchronous_metric_log>
            <dictionaries_config>*_dictionary.xml</dictionaries_config>
            <!-- Configuration of user defined executable functions -->
            <user_defined_executable_functions_config>*_function.xml</user_defined_executable_functions_config>
            <encryption_codecs></encryption_codecs>
            <distributed_ddl>
                <!-- Path in ZooKeeper to queue with DDL queries -->
                <path>/clickhouse/task_queue/ddl</path>

            </distributed_ddl>

            <format_schema_path>/var/lib/clickhouse/format_schemas/</format_schema_path>

            <query_masking_rules>
                <rule>
                    <name>hide encrypt/decrypt arguments</name>
                    <regexp>((?:aes_)?(?:encrypt|decrypt)(?:_mysql)?)\s*\(\s*(?:'(?:\\'|.)+'|.*?)\s*\)</regexp>
                    <replace>\1(???)</replace>
                </rule>
            </query_masking_rules>
            <prometheus>
                <endpoint>/metrics</endpoint>
                <port>8001</port>
                <metrics>true</metrics>
                <events>true</events>
                <asynchronous_metrics>true</asynchronous_metrics>
            </prometheus>
        </clickhouse>
dashboards:
  # dashboards.enabled -- provision grafana dashboards as secrets (can be synced by grafana dashboards sidecar https://github.com/grafana/helm-charts/blob/grafana-6.33.1/charts/grafana/values.yaml#L679 )
  enabled: false
  # dashboards.additionalLabels -- labels to add to a secret with dashboards

  additionalLabels:
    grafana_dashboard: ""
  # dashboards.annotations -- annotations to add to a secret with dashboards

  annotations: {}
  grafana_folder: clickhouse
